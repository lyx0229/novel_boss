package com.novel.web.admin.controller;

import java.io.File;
import java.text.ParseException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.novel.web.admin.entity.JSONResponse;
import com.novel.web.admin.entity.Novel;
import com.novel.web.admin.entity.NovelDetail;
import com.novel.web.admin.entity.RechargeTemplate;
import com.novel.web.admin.service.NovelCmsService;
import com.novel.web.boss.common.tools.PageableTools;
import com.novel.web.boss.common.tools.SortDto;
import com.novel.web.boss.entity.UserPO;
import com.novel.web.common.utils.BusinessConfig;
import com.novel.web.common.utils.Util;

/**
 * 小说管理信息
 * 
 * @author Administrator
 *
 */
@RestController
@RequestMapping("/novel")
public class NovelCmsController {
	Logger logger = LoggerFactory.getLogger(NovelCmsController.class);
	@Autowired
	NovelCmsService novelCmsService;
	@Autowired
	BusinessConfig config;

	/**
	 * 进入页面
	 * 
	 * @return
	 */
	@RequestMapping("/novel_main")
	public ModelAndView getFinancialMain() {
		ModelAndView model = new ModelAndView("html/novel/novel_list");
		return model;
	}

	/**
	 * 小说列表查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/novellist", method = RequestMethod.POST)
	public JSONResponse queryFinancialInfo(HttpServletRequest request) {
		JSONObject json = new JSONObject();
		String param1 = request.getParameter("pageSize");
		String param2 = request.getParameter("currentPage");
		String novel_name = request.getParameter("searchName");
		int sex_status = Util.toInt(request.getParameter("searchSexStatus"));
		int type_status = Util.toInt(request.getParameter("searchTypeStatus"));
		int novel_state = Util.toInt(request.getParameter("searchNovelStatus"));
		int hot_status = Util.toInt(request.getParameter("searchHotStatus"));
		int pageSize = Integer.valueOf(param1);
		int currentPage = Integer.valueOf(param2);
		Novel po = new Novel();
		po.setNovel_name(novel_name);
		po.setSex_status(sex_status);
		po.setNovel_state(novel_state);
		po.setType_status(type_status);
		po.setHot_status(hot_status);
		Page<Novel> datas = novelCmsService.findNovelByCondition(po,
				PageableTools.basicPage(currentPage, pageSize, new SortDto("id")));
		json.put("novellist", datas);//
		return JSONResponse.success(json);
	}

	/**
	 * 小说添加
	 * 
	 * @return
	 */
	@RequestMapping(value = "/add_novel", method = RequestMethod.POST)
	public JSONResponse add_novel(HttpServletRequest request) {
		UserPO user = (UserPO) request.getSession().getAttribute("userInfo");
		if (user == null) {
			return JSONResponse.error("请重新登陆");
		}
		String param = request.getParameter("novelPO");
		JSONObject jsonObject = JSONObject.parseObject(param);
		Novel po = (Novel) JSONObject.toJavaObject(jsonObject, Novel.class);
		po.setNovel_update_time(new Date());
		novelCmsService.saveAndUpdate(po);
		return JSONResponse.success(po);
	}

	/**
	 * 删除小说
	 * 
	 * @return
	 */
	@RequestMapping("/del_novel")
	public JSONResponse del_novel(HttpServletRequest request) {
		String idstr = request.getParameter("id");
		int id = 0;
		if (null != idstr) {
			id = Integer.valueOf(idstr);
		}
		novelCmsService.deleteById(id);
		return JSONResponse.success("操作成功");
	}

	/**
	 * 小说查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/get_novel", method = RequestMethod.POST)
	public JSONResponse get_novel(HttpServletRequest request) {
		int id = Util.toInt(request.getParameter("id"));
		logger.info("id" + id);
		Novel po = novelCmsService.findNovelById(id);
		return JSONResponse.success(po);
	}

	/**
	 * 小说章节列表查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/novel_detail_list", method = RequestMethod.POST)
	public JSONResponse novel_detail_list(HttpServletRequest request) {
		JSONObject json = new JSONObject();
		String param1 = request.getParameter("pageSize");
		String param2 = request.getParameter("currentPage");
		int novel_id = Util.toInt(request.getParameter("novel_id"));
		int pageSize = Integer.valueOf(param1);
		int currentPage = Integer.valueOf(param2);
		NovelDetail po = new NovelDetail();
		po.setNovel_id(novel_id);
		Page<NovelDetail> datas = novelCmsService.findNovelDetailByCondition(po,
				PageableTools.basicPage(currentPage, pageSize, new SortDto("id")));
		json.put("detaillist", datas);//
		return JSONResponse.success(json);
	}

	/**
	 * 小说章节查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/get_novel_detail", method = RequestMethod.POST)
	public JSONResponse get_novel_detail(int id) {
		logger.info("id" + id);
		NovelDetail po = novelCmsService.findNovelDetailById(id);
		return JSONResponse.success(po);
	}

	/**
	 * 删除小说章节
	 * 
	 * @return
	 */
	@RequestMapping("/del_novel_detail")
	public JSONResponse del_novel_detail(HttpServletRequest request) {

		String idstr = request.getParameter("id");
		logger.info("章节id:" + idstr);
		int id = 0;
		if (null != idstr) {
			id = Integer.valueOf(idstr);
		}
		novelCmsService.deleteDetailById(id);
		return JSONResponse.success("操作成功");
	}

	/**
	 * 更新小说章节
	 * 
	 * @return
	 * @throws ParseException
	 */
	@RequestMapping(value = "/update_chapter", method = RequestMethod.POST)
	public JSONResponse update_temple(HttpServletRequest request) throws ParseException {
		logger.info("更新小说章节");
		String param = request.getParameter("po");
		int novel_id = Util.toInt(request.getParameter("novel_id"));
		JSONObject jsonObject = JSONObject.parseObject(param);
		NovelDetail po = (NovelDetail) JSONObject.toJavaObject(jsonObject, NovelDetail.class);
		po.setNovel_id(novel_id);
		Novel novel = novelCmsService.updateNovelAndNovelDetail(po);
		return JSONResponse.success(novel);
	}

	// 处理文件上传
	@RequestMapping(value = "/recharge_upload", method = RequestMethod.POST)
	public @ResponseBody String recharge_upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		String fileName = file.getOriginalFilename();
		int id = Util.toInt(request.getParameter("id"));
		logger.info("id:" + id);
		NovelDetail detail = novelCmsService.findNovelDetailById(id);
		logger.info("novel_id:" + detail.getNovel_id());
		logger.info("上传的文件名为：" + fileName);
		// 获取文件的后缀名
		String suffixName = fileName.substring(fileName.lastIndexOf("."));
		logger.info("上传的后缀名为：" + suffixName);
		String filePath = config.BOOKS_URL + detail.getNovel_id() + "\\";
		String imgurl = filePath + fileName;
		for(int i = 0; i < 2; i++){
			imgurl = imgurl.substring(imgurl.indexOf("\\")+1);
        }
		File dest = new File(filePath + fileName);
		imgurl=imgurl.replace("\\","/");
		logger.info("imgurl：" + imgurl);
		// 检测是否存在目录
		if (!dest.getParentFile().exists()) {
			dest.getParentFile().mkdirs();
		}
		try {
			file.transferTo(dest);
			detail.setChapter_url(config.DOMAIN+imgurl);
			novelCmsService.updateNovel(detail);
		} catch (Exception e) {
			return "failed";
		}
		return "success";
	}
}
