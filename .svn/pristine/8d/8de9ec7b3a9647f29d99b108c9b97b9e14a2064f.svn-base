package com.novel.web.admin.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.novel.web.admin.entity.JSONResponse;
import com.novel.web.admin.entity.PlayTourGoods;
import com.novel.web.admin.entity.RechargeDetail;
import com.novel.web.admin.entity.RechargeTemplate;
import com.novel.web.admin.service.CommonService;
import com.novel.web.boss.common.tools.PageableTools;
import com.novel.web.boss.common.tools.SortDto;
import com.novel.web.common.utils.BusinessConfig;
import com.novel.web.common.utils.Util;

/**
 * 业务管理信息
 * @author Administrator
 *
 */
@RestController
@RequestMapping("/business")
public class BusinessController {
	Logger logger = LoggerFactory.getLogger(BusinessController.class); 
	@Autowired
	CommonService commonService;
	@Autowired
	BusinessConfig config;
	 /**
	 * 进入礼物模板页面
	 * 
	 * @return
	 */
	@RequestMapping("/goods_temple_main")
	public ModelAndView goods_temple_main() {
		ModelAndView model = new ModelAndView("html/business/goods_temple");
		return model;
	}
	 /**
	 * 进入充值模板页面
	 * 
	 * @return
	 */
	@RequestMapping("/recharge_temple_main")
	public ModelAndView recharge_temple_main() {
		ModelAndView model = new ModelAndView("html/business/recharge_temple");
		return model;
	}
	 /**
		 * 进入充值明细页面
		 * 
		 * @return
		 */
		@RequestMapping("/recharge_detail_main")
		public ModelAndView recharge_detail_main() {
			ModelAndView model = new ModelAndView("html/business/recharge_detail");
			return model;
		}
	/**
	 * 礼物模板列表查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/goods_temple_list", method = RequestMethod.POST)
	public JSONResponse goods_temple_list(HttpServletRequest request) {
		JSONObject json =new JSONObject();
		String param1 = request.getParameter("pageSize");
		String param2 = request.getParameter("currentPage");
		String goods_name = request.getParameter("searchName");
		int pageSize = Integer.valueOf(param1);
		int currentPage = Integer.valueOf(param2);
		PlayTourGoods po = new PlayTourGoods();
		po.setGoods_name(goods_name);
		Page<PlayTourGoods> datas = commonService.findPlayTourGoodsByCondition(po,
				PageableTools.basicPage(currentPage, pageSize, new SortDto("id")));
		json.put("goodslist", datas);// 
		return JSONResponse.success(json);
	}
	
	/**
	 *  充值模板列表查询
	 * 
	 * @return
	 */
	@RequestMapping(value = "/recharge_temple_list", method = RequestMethod.POST)
	public JSONResponse recharge_temple_list(HttpServletRequest request) {
		JSONObject json =new JSONObject();
		String param1 = request.getParameter("pageSize");
		String param2 = request.getParameter("currentPage");
		String recharge_temple = request.getParameter("searchName");
		int pageSize = Integer.valueOf(param1);
		int currentPage = Integer.valueOf(param2);
		RechargeTemplate po = new RechargeTemplate();
		po.setTemplate_name(recharge_temple);
		Page<RechargeTemplate> datas = commonService.findRechargeTemplateByCondition(po,
				PageableTools.basicPage(currentPage, pageSize, new SortDto("id")));
		json.put("templelist", datas);// 
		return JSONResponse.success(json);
	}
	
	/**
	 *  充值明细列表查询
	 * 
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/recharge_detail_list", method = RequestMethod.POST)
	public JSONResponse recharge_detail_list(HttpServletRequest request) throws ParseException {
		JSONObject json =new JSONObject();
		String param1 = request.getParameter("pageSize");
		String param2 = request.getParameter("currentPage");
		int user_id = Util.toInt(request.getParameter("searchName"));
		int result = Util.toInt(request.getParameter("searchResult"));
		String searchOrderNo = request.getParameter("searchOrderNo");
		String datemin = request.getParameter("datemin");
		String datemax = request.getParameter("datemax");
		int pageSize = Integer.valueOf(param1);
		int currentPage = Integer.valueOf(param2);
		RechargeDetail po = new RechargeDetail();
		po.setUser_id(user_id);
		po.setResult(result);
		po.setOrder_no(searchOrderNo);
		Date start_date=null;
		Date end_date=null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(datemin!=null && datemin!=""){
			datemin+=" 00:00:00"; 
			start_date = sdf.parse(datemin);
		}
		if(datemax!=null && datemax!=""){
			datemax+=" 23:59:59";
			end_date = sdf.parse(datemax);
		}
		Page<RechargeDetail> datas = commonService.findRechargeDetailByCondition(po,
				PageableTools.basicPage(currentPage, pageSize, new SortDto("id")),start_date,end_date);
		json.put("detaillist", datas);// 
		return JSONResponse.success(json);
	}
	/**
	 *  查看礼物信息
	 * 
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/get_goods", method = RequestMethod.POST)
	public JSONResponse get_goods(HttpServletRequest request) throws ParseException {
		logger.info("礼物信息");
		int id = Util.toInt(request.getParameter("id"));
		PlayTourGoods goods=commonService.findPlayTourGoodsByID(id);
		return JSONResponse.success(goods);
	}
	/**
	 *  更新礼物信息
	 * 
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/update_goods", method = RequestMethod.POST)
	public JSONResponse update_goods(HttpServletRequest request) throws ParseException {
		logger.info("礼物信息");
		String param = request.getParameter("po");
		JSONObject jsonObject = JSONObject.parseObject(param);
		PlayTourGoods po = (PlayTourGoods) JSONObject.toJavaObject(jsonObject, PlayTourGoods.class);
		PlayTourGoods goods=commonService.findPlayTourGoodsByID(po.getId());
		goods.setBookpeas(po.getBookpeas());
		goods.setGoods_name(po.getGoods_name());
		goods.setUpdate_time(new Date());
		goods=commonService.saveAndUpdate(goods);
		return JSONResponse.success(goods);
	}
	//处理文件上传
    @RequestMapping(value="/goods_upload", method = RequestMethod.POST)
    public @ResponseBody String uploadImg(@RequestParam("file") MultipartFile file,
            HttpServletRequest request) {
        String fileName = file.getOriginalFilename();
        int id=Util.toInt(request.getParameter("id"));
        logger.info("id:"+id);
        PlayTourGoods goods=commonService.findPlayTourGoodsByID(id);
        logger.info("上传的文件名为：" + fileName);
        // 获取文件的后缀名
        String suffixName = fileName.substring(fileName.lastIndexOf("."));
        logger.info("上传的后缀名为：" + suffixName);
        String filePath = config.GOODS_IMG;
        String imgurl=filePath+fileName;
        try {
        	Util.uploadFile(file.getBytes(), filePath, fileName);
        	goods.setImgurl(imgurl);
        	goods.setUpdate_time(new Date());
        	commonService.saveAndUpdate(goods);
        } catch (Exception e) {
        	 return "failed";
        }
        return "success";
    }
    //处理文件上传
    @RequestMapping(value="/recharge_upload", method = RequestMethod.POST)
    public @ResponseBody String recharge_upload(@RequestParam("file") MultipartFile file,
    		HttpServletRequest request) {
    	String fileName = file.getOriginalFilename();
    	int id=Util.toInt(request.getParameter("id"));
    	logger.info("id:"+id);
    	RechargeTemplate temple=commonService.findRechargeTemplatesByID(id);
    	logger.info("上传的文件名为：" + fileName);
    	// 获取文件的后缀名
    	String suffixName = fileName.substring(fileName.lastIndexOf("."));
    	logger.info("上传的后缀名为：" + suffixName);
    	String filePath = config.RECHARGE_IMG;
    	String imgurl=filePath+fileName;
    	try {
    		Util.uploadFile(file.getBytes(), filePath, fileName);
    		temple.setHead_img(imgurl);
    		temple.setCreate_time(new Date());
    		commonService.saveAndUpdate(temple);
    	} catch (Exception e) {
    		return "failed";
    	}
    	return "success";
    }
    
    /**
	 *  查看充值模板
	 * 
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/get_temple", method = RequestMethod.POST)
	public JSONResponse get_temple(HttpServletRequest request) throws ParseException {
		logger.info("充值模板信息");
		int id = Util.toInt(request.getParameter("id"));
		logger.info("id："+id);
		RechargeTemplate temple=commonService.findRechargeTemplatesByID(id);
		return JSONResponse.success(temple);
	}
	/**
	 *  更新充值模板
	 * 
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/update_temple", method = RequestMethod.POST)
	public JSONResponse update_temple(HttpServletRequest request) throws ParseException {
		logger.info("更新充值模板信息");
		String param = request.getParameter("po");
		JSONObject jsonObject = JSONObject.parseObject(param);
		RechargeTemplate po = (RechargeTemplate) JSONObject.toJavaObject(jsonObject, RechargeTemplate.class);
		RechargeTemplate temple=commonService.findRechargeTemplatesByID(po.getId());
		temple.setTemplate_name(po.getTemplate_name());
		temple.setBook_peas(po.getBook_peas());
		temple.setDescription(po.getDescription());
		temple.setPre_book_peas(po.getPre_book_peas());
		temple.setRecharge_money(po.getRecharge_money());
		temple.setTerms(po.getTerms());
		temple.setCreate_time(new Date());
		temple=commonService.saveAndUpdate(temple);
		return JSONResponse.success(temple);
	}
}
